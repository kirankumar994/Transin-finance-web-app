<!DOCTYPE html>
<html>
  <head>
    <title><%=typeof title == 'TRANSIN' ? 'New Sails App' : title%></title>

    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">



      
       <p style = "background-color:grey; text-align:center;"><img src="images/transindia_logo.png"></p>
     
           
           




    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->

    <!--STYLES-->
    <link rel="stylesheet" href="/styles/bootstrap-theme.css">
    <link rel="stylesheet" href="/styles/bootstrap.css">
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->
  </head>

  <body>
                    
                          
                              
                          
                  
                            
           <h1 style = "background-color:white; text-align:center;">

                Fleet Owner Credit Details
           </h1>


                <form method="post" enctype="multipart/form-data">


   <div class="form-group">
   </br></br>
   
    <label for="inputFleetOwnerName" class="control-label col-xs-4">Fleet Owner Name</label>
    <div class="col-xs-10">
    <input type="fleetownername" class="form-control" id="fleetownername" placeholder=" Enter Fleet Owner Name">
    </div>
    </br></br>

    <div class="form-group">
    </br></br>

    <label for="inputNameoftheTransport" class="control-label col-xs-4">Name of the Transport</label>
    <div class="col-xs-10">
    <input type="nameofthetransport" class="form-control" id="nameofthetransport" placeholder=" Enter Name of the Transport">
    </div>
    </br></br>

    <div class="form-group">
    </br></br>

    <label for="inputCredit" class="control-label col-xs-4">Credit</label>
    <div class="col-xs-10">
    <input type="credit" class="form-control" id="credit" placeholder=" Enter Credit">
    </div>
     
    <div class="form-group">
    </br></br></br></br></br>
            <div class="col-xs-10">
                <button type="submit" onclick="showAlert()" class="btn btn-primary">Submit</button>
            </div>


    <div class="form-group">
    </form>
    </br></br></br></br></br>
    <form method="post" action="/test" enctype="multipart/form-data">
            <div class="col-xs-10">
                <a href="/test"><button type="logout" class="btn btn-primary">Logout</button></a>
            </div>
    </form>
       

      
      <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js"></script>
      <script>
          function showAlert(){
              var fleetownername = document.getElementById("fleetownername").value;
              var nameofthetransport = document.getElementById("nameofthetransport").value;
              var credit = document.getElementById("credit").value;
              $.post('/finance',
                    {Fleet_Owner_Name:fleetownername, Name_of_the_Transport:nameofthetransport, Credit:credit});
          };
          </script>
      
      

    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->
      
     

    <!--SCRIPTS-->
    <script src="/js/dependencies/sails.io.js"></script>
    <!--SCRIPTS END-->
    </div>
  </body>
</html>


